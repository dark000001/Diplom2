import streamlit as st
import numpy as np
import pandas as pd
import plotly.graph_objs as go

texts = {
    "ru": {
        "title": "–ú–æ–¥–µ–ª—å —Ö–∏—â–Ω–∏–∫‚Äì–∂–µ—Ä—Ç–≤–∞",
        "alpha": "Œ± (—Ä–æ—Å—Ç –∂–µ—Ä—Ç–≤)",
        "beta": "Œ≤ (–ø–æ–µ–¥–∞–Ω–∏–µ)",
        "gamma": "Œ≥ (—Å–º–µ—Ä—Ç–Ω–æ—Å—Ç—å —Ö–∏—â–Ω–∏–∫–æ–≤)",
        "delta": "Œ¥ (–ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –∂–µ—Ä—Ç–≤ –≤ —Ö–∏—â–Ω–∏–∫–æ–≤)",
        "x0": "–ù–∞—á–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∂–µ—Ä—Ç–≤",
        "y0": "–ù–∞—á–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Ö–∏—â–Ω–∏–∫–æ–≤",
        "T": "–í—Ä–µ–º—è –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è",
        "dt": "–®–∞–≥ –≤—Ä–µ–º–µ–Ω–∏",
        "prey": "–ñ–µ—Ä—Ç–≤—ã",
        "predator": "–•–∏—â–Ω–∏–∫–∏",
        "time": "–í—Ä–µ–º—è",
        "populations_over_time": "–ü–æ–ø—É–ª—è—Ü–∏–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–∏",
        "phase_portrait": "–§–∞–∑–æ–≤—ã–π –ø–æ—Ä—Ç—Ä–µ—Ç",
        "download_csv": "–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV",
        "language": "–Ø–∑—ã–∫",
        "theme": "–¢–µ–º–∞",
        "light": "–°–≤–µ—Ç–ª–∞—è",
        "dark": "–¢—ë–º–Ω–∞—è",
        "model": "–ú–æ–¥–µ–ª—å",
        "lotka_volterra": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –õ–æ—Ç–∫–∞‚Äì–í–æ–ª—å—Ç–µ—Ä—Ä–∞",
        "logistic_lv": "–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ä–µ—Å—É—Ä—Å–æ–≤",
    },
    "en": {
        "title": "Predator-Prey Model",
        "alpha": "Œ± (prey growth rate)",
        "beta": "Œ≤ (predation rate)",
        "gamma": "Œ≥ (predator death rate)",
        "delta": "Œ¥ (predator reproduction rate)",
        "x0": "Initial prey population",
        "y0": "Initial predator population",
        "T": "Simulation time",
        "dt": "Time step",
        "prey": "Prey",
        "predator": "Predators",
        "time": "Time",
        "populations_over_time": "Populations over time",
        "phase_portrait": "Phase portrait",
        "download_csv": "Download results as CSV",
        "language": "Language",
        "theme": "Theme",
        "light": "Light",
        "dark": "Dark",
        "model": "Model",
        "lotka_volterra": "Classic Lotka‚ÄìVolterra",
        "logistic_lv": "Logistic model with resource limit",
    },
    "kk": {
        "title": "Jirtqish-jalƒ±wshi modeli",
        "alpha": "Œ± (√≥ljeni≈Ñ √≥siw tezligi)",
        "beta": "Œ≤ (jirtqishliq tezligi)",
        "gamma": "Œ≥ (jirtqish √≥lim koefficienti)",
        "delta": "Œ¥ (jirtqish k√≥beyiw tezligi)",
        "x0": "D√°slepki jemtik populyaciyasƒ±",
        "y0": "Jirtqishlardƒ±n d√°slepki sanƒ±",
        "T": "Simulyaciya waqtƒ±",
        "dt": "Waqƒ±t q√°demi",
        "prey": "√≥lje",
        "predator": "Jirtqishlar",
        "time": "Waqit",
        "populations_over_time": "Zamana boyinsha populyaciyalar",
        "phase_portrait": "Faza portreti",
        "download_csv": "CSV t√∫rinde n√°tiyjelerdi j√∫klep alƒ±w",
        "language": "Til",
        "theme": "Tema",
        "light": "jaqtƒ±lƒ±q",
        "dark": "Qara≈Ñ«µƒ±",
        "model": "Model",
        "lotka_volterra": "Classic Lotka-Volterra",
        "logistic_lv": "Resource limitli logistika modeli",
    }
}

# –í—ã–±–æ—Ä —è–∑—ã–∫–∞
lang = st.sidebar.selectbox("üåê –Ø–∑—ã–∫ / Language / Til", ["–†—É—Å—Å–∫–∏–π", "English", "“ö–∞—Ä–∞“õ–∞–ª–ø–∞“õ—à–∞"])
lang_code = "ru" if lang == "–†—É—Å—Å–∫–∏–π" else ("kk" if lang == "“ö–∞—Ä–∞“õ–∞–ª–ø–∞“õ—à–∞" else "en")
t = texts[lang_code]

st.title(t["title"])

# –¢–µ–º–∞ (—Å–≤–µ—Ç–ª–∞—è/—Ç—ë–º–Ω–∞—è)
theme = st.sidebar.radio(t["theme"], [t["light"], t["dark"]])
is_dark = (theme == t["dark"])

bg_color = "#222222" if is_dark else "white"
fg_color = "white" if is_dark else "black"
prey_color = "cyan" if is_dark else "blue"
predator_color = "orange" if is_dark else "red"

# –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
model_choice = st.sidebar.selectbox(t["model"], [t["lotka_volterra"], t["logistic_lv"]])

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
alpha = st.sidebar.number_input(t["alpha"], min_value=0.01, max_value=1.0, value=0.1, step=0.01, format="%.2f")
beta = st.sidebar.number_input(t["beta"], min_value=0.001, max_value=0.1, value=0.02, step=0.001, format="%.3f")
gamma = st.sidebar.number_input(t["gamma"], min_value=0.01, max_value=1.0, value=0.1, step=0.01, format="%.2f")
delta = st.sidebar.number_input(t["delta"], min_value=0.001, max_value=0.1, value=0.01, step=0.001, format="%.3f")
x0 = st.sidebar.number_input(t["x0"], min_value=1.0, max_value=100.0, value=40.0, step=1.0, format="%.0f")
y0 = st.sidebar.number_input(t["y0"], min_value=1.0, max_value=100.0, value=9.0, step=1.0, format="%.0f")
T = st.sidebar.number_input(t["T"], min_value=10.0, max_value=500.0, value=200.0, step=10.0, format="%.0f")
dt = st.sidebar.number_input(t["dt"], min_value=0.01, max_value=1.0, value=0.1, step=0.01, format="%.2f")

time = np.arange(0, T + dt, dt)
x = [x0]
y = [y0]

def lotka_volterra(x, y, a, b, g, d):
    dx = a * x - b * x * y
    dy = d * x * y - g * y
    return dx, dy

def logistic_lv(x, y, a, b, g, d, K=100):
    dx = a * x * (1 - x / K) - b * x * y
    dy = d * x * y - g * y
    return dx, dy

for _ in time[1:]:
    if model_choice == t["lotka_volterra"]:
        dx, dy = lotka_volterra(x[-1], y[-1], alpha, beta, gamma, delta)
    else:
        dx, dy = logistic_lv(x[-1], y[-1], alpha, beta, gamma, delta)
    x.append(x[-1] + dx * dt)
    y.append(y[-1] + dy * dt)

df = pd.DataFrame({
    t["time"]: time,
    t["prey"]: x,
    t["predator"]: y
})

# –ì—Ä–∞—Ñ–∏–∫ –ø–æ–ø—É–ª—è—Ü–∏–π –≤–æ –≤—Ä–µ–º–µ–Ω–∏
fig1 = go.Figure()
fig1.add_trace(go.Scatter(x=time, y=x, mode='lines', name=t["prey"], line=dict(color=prey_color)))
fig1.add_trace(go.Scatter(x=time, y=y, mode='lines', name=t["predator"], line=dict(color=predator_color)))
fig1.update_layout(
    title=t["populations_over_time"],
    xaxis_title=t["time"],
    yaxis_title="–ü–æ–ø—É–ª—è—Ü–∏—è",
    plot_bgcolor=bg_color,
    paper_bgcolor=bg_color,
    font_color=fg_color
)
st.plotly_chart(fig1, use_container_width=True)

# –§–∞–∑–æ–≤—ã–π –ø–æ—Ä—Ç—Ä–µ—Ç
fig2 = go.Figure()
fig2.add_trace(go.Scatter(x=x, y=y, mode='lines', line=dict(color=prey_color)))
fig2.update_layout(
    title=t["phase_portrait"],
    xaxis_title=t["prey"],
    yaxis_title=t["predator"],
    plot_bgcolor=bg_color,
    paper_bgcolor=bg_color,
    font_color=fg_color
)
st.plotly_chart(fig2, use_container_width=True)

# –°–∫–∞—á–∞—Ç—å CSV
csv = df.to_csv(index=False)
st.download_button(
    label=t["download_csv"],
    data=csv,
    file_name='predator_prey_simulation.csv',
    mime='text/csv'
)